# docker-compose.yaml

services:
  # 互動登入前置檢查：任何 AI 未就緒就 exit 1，阻擋 backend/frontend 啟動
  login:
    container_name: claudable_login
    build:
      context: ./apps/api
      dockerfile: dockerfile
    stdin_open: true
    tty: true
    environment:
      HOME: /root
      XDG_CONFIG_HOME: /root/.config
      PATH: "/opt/venv/bin:/usr/local/bin:/usr/bin:/bin:/root/.local/bin"
      # 可調參數
      STRICT_CLAUDE: "0"     # 1=Claude 未登入就 fail；0=僅警示
      STRICT_CODEX: "0"      # 1=Codex 未登入就 fail；0=僅警示
      GEMINI_MAX_RUNS: "2"   # Gemini 自動重啟顯示授權連結的次數
    volumes:
      # 專案程式（可寫，方便在容器內瀏覽）
      - ./apps/api:/srv/api

      # 各家 CLI 狀態卷（全部命名卷，避免 EROFS）
      - claude_plugins:/root/.claude/plugins
      - claude_projects:/root/.claude/projects
      - claude_sessions:/root/.claude/sessions
      - gemini_state:/root/.config/gemini
      - gemini_home:/root/.gemini
      - qwen_state:/root/.qwen
      - cursor_data:/root/.local/share/cursor-agent
      - cursor_config:/root/.config/cursor-agent
      - openai_state:/root/.config/openai
    working_dir: /srv/api
    # ★ 直接呼叫映像內的檢查腳本（避免將本機檔案當目錄掛載）
    command: ["/bin/bash","-lc","/usr/local/bin/ai-login-check.sh"]

  backend:
    container_name: claudable_backend
    build:
      context: ./apps/api
      dockerfile: dockerfile
    env_file:
      - .env
    environment:
      HOME: /root
      XDG_CONFIG_HOME: /root/.config
      PORT: 8080
      PROJECTS_ROOT: /srv/data/projects
      PROJECTS_ROOT_HOST: /srv/data/projects
      PATH: "/opt/venv/bin:/usr/local/bin:/usr/bin:/bin:/root/.local/bin"
    depends_on:
      login:
        condition: service_completed_successfully
    volumes:
      - ./apps/api:/srv/api
      - ./data:/srv/data

      # Claude（命名卷可寫）
      - claude_plugins:/root/.claude/plugins
      - claude_projects:/root/.claude/projects
      - claude_sessions:/root/.claude/sessions

      # Gemini / Qwen / Cursor / Codex（OpenAI）狀態（命名卷）
      - gemini_state:/root/.config/gemini
      - gemini_home:/root/.gemini
      - qwen_state:/root/.qwen
      - cursor_data:/root/.local/share/cursor-agent
      - cursor_config:/root/.config/cursor-agent
      - openai_state:/root/.config/openai

      # 啟動腳本（若 Dockerfile 已 COPY 可移除）
      - ./apps/api/bootstrap-cursor.sh:/usr/local/bin/bootstrap-cursor.sh:ro
    working_dir: /srv/api
    ports:
      - "4090:8080"
    command: ["/bin/bash","-lc","/usr/local/bin/bootstrap-cursor.sh uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload"]

  frontend:
    container_name: claudable_frontend
    build:
      context: ./apps/web
      dockerfile: dockerfile
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4090
      NEXT_PUBLIC_API_BASE: http://localhost:4090
      NEXT_PUBLIC_WS_BASE: ws://localhost:4090
      INTERNAL_API_URL: http://backend:8080
    depends_on:
      backend:
        condition: service_started
    working_dir: /app
    volumes:
      - ./apps/web:/app
      - web_node_modules:/app/node_modules
      - pnpm_store:/pnpm-store
      - pnpm_state:/pnpm-state
    ports:
      - "5090:3000"
    command: >
      bash -lc "
        corepack enable &&
        pnpm config set store-dir /pnpm-store &&
        pnpm config set state-dir /pnpm-state &&
        pnpm install &&
        pnpm dev -p 3000
      "

volumes:
  web_node_modules: {}
  pnpm_store: {}
  pnpm_state: {}
  claude_plugins: {}
  claude_projects: {}
  claude_sessions: {}
  gemini_state: {}
  gemini_home: {}
  qwen_state: {}
  cursor_data: {}
  cursor_config: {}
  openai_state: {}
